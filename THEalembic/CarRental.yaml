openapi: 3.0.1
info:
  title: Car rental
  description: Варіант 14. Створити сервіс для прокату авто. Користувачі сервісу можуть бути двох рівнів – адміністратори та пасажири. Адміністратори можуть додавати та видаляти авто із системи, редагувати інформацію про авто. Пасажири можуть переглядати каталог та бронювати авто на певний час.
  version: 1.0.0
servers:
  - url: 'https://сar_rental.swagger.io/api/v2'
  - url: 'http://сar_rental.swagger.io/api/v2'

tags:
- name: user
  description: Operations with users
- name: car
  description: Operations with car
- name: booking
  description: Car booking

paths:
  /user:
    post:
      tags:
        - user
      description: Operations with users
      summary: Operations with users
      operationId: createuser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '200':
          description: The user is created !
          content: {}
        '400':
          description: Error!
        '404':
          description: Missing values !
          content: {}
      security:
      - car_auth:
        - write:passenger
        - read:passenger
      - api_key: [ ]
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  '/user/{id_user}':
    get:
      tags:
        - user
      summary: Get user data
      operationId: getdata
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content: {}
        '404':
          description: The user was not found
          content: {}

      security:
      - car_auth:
        - read:passenger
      - api_key: [ ]
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteuser
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User was deleted !
          content: {}
        '404':
          description: The user was not found
          content: {}
      security:
        - car_auth:
          - write:administrator
          - read:administrator
        - api_key: [ ]
  /car:
    post:
      tags:
        - car
      summary: Add a new car
      operationId: addcar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_car'
      responses:
        '400':
          description: Error
          content: {}
        '200':
          description: The car is created !
          content: {}
        '404':
          description: Missing values !
          content: {}
      security:
      - car_auth:
        - write:administrator
        - read:administrator
      - api_key: [ ]
    get:
      tags:
        - car
      summary: Get all the cars
      operationId: getcars
      responses:
        '404':
          description: The car was not found
          content: {}
        '200':
          description: ''
          content: {}
      security:
      - car_auth:
        - write:passenger
        - read:passenger
      - api_key: [ ]
  '/car/{id_car}':
    get:
      tags:
        - car
      summary: Get the car with such id
      operationId: getcarid
      parameters:
        - name: id_car
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content: {}
      security:
      - car_auth:
        - write:administrator
        - read:administrator
      - api_key: [ ]
    put:
      tags:
        - car
      summary: Update the car with such id
      operationId: Updatecar
      parameters:
        - name: id_car
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Car was updated !
          content: {}
        '403':
          description: You do not have access!
          content: {}
        '404':
          description: Missing values !
          content: {}

      security:
      - car_auth:
        - write:administrator
        - read:administrator
      - api_key: [ ]
    delete:
      tags:
        - car
      summary: Delete the car with such id
      operationId: deletecar
      parameters:
        - name: id_car
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Car was deleted !
          content: {}
        '403':
          description: You do not have access !
          content: {}
        '404':
          description: The car was not found !
          content: {}
      security:
        - car_auth:
          - write:administrator
          - read:administrator
        - api_key: [ ]
  /booking:
    post:
      tags:
        - booking
      summary: Create a new booking
      operationId: creatbooking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_booking'
        required: true
      responses:
        '200':
          description: The booking is created !
          content: {}
        '400':
          description: ERROR
          content: {}

      security:
      - car_auth:
        - write:passenger
        - read:passenger
      - api_key: [ ]
    get:
      tags:
        - booking
      summary: Get everything that is not booked
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/booking'
                nullable: false

      security:
      - car_auth:
        - write:passenger
        - read:passenger
      - api_key: [ ]

components:
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
        first name:
          type: string
        last name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
        role:
          type: string
      nullable: false
    car:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
          format: float
      nullable: false
    booking:
      type: object
      properties:
        id:
          type: integer
        user id:
          type: integer
        car id:
          type: integer
        booking from:
          type: integer
          format: date
        booking until:
          type: integer
          format: date
      nullable: false
    create_user:
      type: object
      properties:
        first name:
          type: string
        last name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
        role:
          type: string
      nullable: false
    create_car:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
          format: float
      nullable: false
    create_booking:
      type: object
      properties:
        user id:
          type: integer
        car id:
          type: integer
        booking from:
          type: integer
          format: date
        booking until:
          type: integer
          format: date
      nullable: false


  securitySchemes:
    car_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://car.swagger.io/oauth/dialog
          scopes:
            write:passenger: modify user in your account
            read:passenger: read your pets
            write:administrator: modify user in your account
            read:administrator: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header